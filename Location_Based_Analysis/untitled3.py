# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rl5FHeDvxRwcumjy4CNM90vMFOyNF6VS
"""

import numpy as np
import pandas as pd
import folium
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

df = pd.read_csv('/content/Dataset .csv')

df.dropna(inplace=True)
df.info()

df.drop(['Restaurant ID', 'Address', 'Locality Verbose', 'Currency', 'Has Table booking', 'Has Online delivery', 'Is delivering now', 'Switch to order menu', 'Rating color', 'Rating text', 'Country Code'], inplace=True, axis=1)
df.head(5)

print(df.isnull().sum())

# Calculate the average latitude and longitude
center_lat = df['Latitude'].mean()
center_lon = df['Longitude'].mean()

# Create the map, centered on the average coordinates, with a reasonable zoom level
restaurant_map = folium.Map(location=[center_lat, center_lon], zoom_start=1.5)

# Display the map (in Colab, this will show the map directly)
restaurant_map

# Loop through each restaurant in our DataFrame
for index, row in df.iterrows():
    # Create a popup message with the restaurant's name
    popup_text = f"{row['Restaurant Name']}<br>Rating: {row['Aggregate rating']}"

    # Add a marker to the map
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],  # Restaurant's coordinates
        popup=popup_text,  # Popup message
        icon=folium.Icon(color='blue') # You can change the color.
    ).add_to(restaurant_map)

# Display the map with markers
restaurant_map

def get_marker_color(rating):
    """
    Function to determine marker color based on rating.
    You can customize these ranges and colors as you like.
    """
    if rating >= 4.5:
        return 'darkgreen'  # Excellent
    elif rating >= 4.0:
        return 'green'      # Very Good
    elif rating >= 3.5:
        return 'lightgreen' # Good
    elif rating >= 3.0:
        return 'orange'     # Average
    else:
        return 'red'        # Below Average

# Create the map (if you haven't already)
restaurant_map_colored = folium.Map(location=[center_lat, center_lon], zoom_start=1)

# Loop through restaurants and add colored markers
for index, row in df.iterrows():
    popup_text = f"{row['Restaurant Name']}<br>Rating: {row['Aggregate rating']}"
    marker_color = get_marker_color(row['Aggregate rating']) # Get color based on rating

    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=popup_text,
        icon=folium.Icon(color=marker_color) # Set marker color here
    ).add_to(restaurant_map_colored)

# Display the colored map
restaurant_map_colored

# Select Longitude and Latitude columns as features for clustering
location_data = df[['Longitude', 'Latitude']].values

print(location_data[:5]) # Print the first 5 rows to see the format

inertia = [] # List to store inertia values for different Ks
possible_clusters = range(2, 10) # Trying clusters from 2 to 10

for k in possible_clusters:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10) # Added n_init for recent sklearn versions
    kmeans.fit(location_data)
    inertia.append(kmeans.inertia_)

# Plot the Elbow graph
plt.figure(figsize=(10, 6))
plt.plot(possible_clusters, inertia, marker='o')
plt.title('Elbow Method for Optimal K')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.xticks(possible_clusters)
plt.grid(True)
plt.show()

# Run K-means clustering
kmeans = KMeans(n_clusters= 3, random_state=42, n_init=10) #  Added n_init for recent sklearn versions
df['Cluster'] = kmeans.fit_predict(location_data)

# Let's see how many restaurants are in each cluster
print("\nRestaurant counts per cluster:")
print(df['Cluster'].value_counts().sort_index())

# Display the first few rows with cluster labels
print("\nDataFrame with cluster labels:")
df.head(5)

# Define cluster colors
cluster_colors = ['blue', 'green', 'red']

# Create a new Folium map
restaurant_map_clusters = folium.Map(location=[center_lat, center_lon], zoom_start=10)

# Loop through each restaurant and add a marker with cluster color
for index, row in df.iterrows():
    popup_text = (f"Restaurant: {row['Restaurant Name']}<br>"
                  f"Rating: {row['Aggregate rating']}<br>"
                  f"Cluster: {row['Cluster']}")
    cluster_id = row['Cluster']
    marker_color = cluster_colors[cluster_id % len(cluster_colors)]

    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=popup_text,
        icon=folium.Icon(color=marker_color, icon='circle', prefix='fa')
    ).add_to(restaurant_map_clusters)

# Display the map
restaurant_map_clusters

# Analyze clusters - let's look at ratings and price range by cluster
cluster_analysis = df.groupby('Cluster').agg({
    'Aggregate rating': 'mean',       # Average rating per cluster
    'Price range': 'mean',           # Average price range per cluster
    'Restaurant Name': 'count'      # Number of restaurants in each cluster
}).rename(columns={'Restaurant Name': 'Restaurant Count'}) # Rename for clarity

print("Restaurant Cluster Analysis:")
print(cluster_analysis)

# Analyze cuisines by cluster (let's find top cuisines per cluster - this is a bit more complex)
def top_cuisines_in_cluster(cluster_label, top_n=5):
    cluster_restaurants = df[df['Cluster'] == cluster_label]
    cuisine_counts = cluster_restaurants['Cuisines'].str.split(', ', expand=True).stack().value_counts()
    return cuisine_counts.head(top_n)

print("\nTop Cuisines per Cluster:")
for cluster_label in sorted(df['Cluster'].unique()): # Iterate through clusters in order
    top_cuisines = top_cuisines_in_cluster(cluster_label)
    print(f"\nCluster {cluster_label} - Top Cuisines:")
    print(top_cuisines)